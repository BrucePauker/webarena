<?php
namespace App\Controller;

use App\Controller\AppController;
use App\Controller\EventsController;
use App\Model\Entity\Arena;
/**
 * Arenas Controller
 *
 *
 */
class ArenasController extends AppController
{

    /**
     * @var FightersController
     */
    protected $fightersModel;

    /**
     * @var EventsController
     */
    protected $eventsController;

    /**
     * Initialize the controller with by calling first the initialize method of App Contorller
     *
     * @return void
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->fightersModel = $this->loadModel('Fighters');
        $this->eventsController = new EventsController();
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        // Load the size of the grid
        $size_x = $this->fightersModel->getSizeX();
        $size_y = $this->fightersModel->getSizeY();

        $fighter = $this->fightersModel->getCurrentFighter($this->Auth->user('id'));

        if($fighter)
        {
            if(round($fighter->xp/4, 0, PHP_ROUND_HALF_DOWN) > $fighter->level)
                $this->Flash->success(__('You upgraded your level, go edit your player.'));

            //load the fighter of the current player
            $fighters = $this->fightersModel->loadAllFightersOnSight($fighter);
        }
        else
            $fighters = null;
        
        $this->set('size_x', $size_x);
        $this->set('size_y', $size_y);
        $this->set('fighters', $fighters);
    }

    /**
     * Make an action on the fighter
     *
     * @param string action
     */
    public function makeAction($action) {
        $fighter = $this->loadModel('Fighters')->getCurrentFighter($this->Auth->user('id'));

        if(!$fighter)
        {
            $this->Flash->error(__('You don\'t have a current fighter.'));
            $this->redirect(['action' => 'index']);
            return;
        }

        $newPosX = 0;
        $newPosY = 0;

        if($action == 'up')
        {
            $newPosX = $fighter->coordinate_x;
            $newPosY = $fighter->coordinate_y - 1;
        }
        else if($action == 'down')
        {
            $newPosX = $fighter->coordinate_x;
            $newPosY = $fighter->coordinate_y + 1;
        }
        else if($action == 'left')
        {
            $newPosX = $fighter->coordinate_x - 1;
            $newPosY = $fighter->coordinate_y;
        }
        else if($action == 'right')
        {
            $newPosX = $fighter->coordinate_x + 1;
            $newPosY = $fighter->coordinate_y;
        }

        // Make the test on the new position
        $isFree = $this->fightersModel->isPositionFree($newPosX, $newPosY);
        if($isFree)
        {
            if($isFree == 'available')
            {
                $fighter->coordinate_x = $newPosX;
                $fighter->coordinate_y = $newPosY;

                if($this->Fighters->save($fighter)) {
                    $this->Flash->success(__('You have moved.'));
                    $this->eventsController->add($fighter->name.' moved!', $fighter->coordinate_x, $fighter->coordinate_y );
                }
            }
            else if($isFree[0] == 'fighter')
            {
                $succeed = $this->fightersModel->attack($fighter, $isFree[1]);
                if($succeed == 'miss')
                    $this->Flash->error(__('You\'re attack didn\'t work.'));
                else if($succeed == 'touched')
                {
                    $this->Flash->success(__('You touched your opponent.'));
                    $this->eventsController->add($fighter->name.' moved!', $fighter->coordinate_x, $fighter->coordinate_y);
                }
            else if($succeed == 'killed')
                {
                    $fighter->coordinate_x = $newPosX;
                    $fighter->coordinate_y = $newPosY;
                    $this->Fighters->save($fighter);
                    $this->eventsController->add($fighter->name.' killed '.$isFree[1]->name.'!', $fighter->coordinate_x, $fighter->coordinate_y);
                    $this->Flash->success(__('You killed your opponent.'));
                }
            }
        }
        else
            $this->Flash->error(__('You try to move on an impossible part of the arena.'));

        $this->redirect(['action' => 'index']);
    }
}
